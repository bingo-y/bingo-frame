apply plugin: 'maven'


version = VERSION_NAME
group = GROUP

Properties properties = new Properties()
boolean isHasFile = false
if (project.rootProject.findProject('local.properties') != null){
    isHasFile = true
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}


def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "http://172.16.33.211:8081/repository/maven-releases/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "http://172.16.33.211:8081/repository/maven-snapshots/"
}

def getRepositoryUsername() {
    return isHasFile ? properties.getProperty("maven.username") : ""
}

def getRepositoryPassword() {
    return isHasFile ? properties.getProperty("maven.password") : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
//                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                    scm {
                        url ''
                        connection ''
                        developerConnection ''
                    }
                    licenses {
                        license {
                            name ''
                            url ''
                            distribution ''
                        }
                    }
                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }
//    signing {
//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }

    artifacts {

    }

}